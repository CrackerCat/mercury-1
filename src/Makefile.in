# makefile for mercury fast fingerprint / packet metadata capture program
#

# definitions for colorized output
COLOR_RED    = "\033[0;31m"
COLOR_GREEN  = "\033[0;32m"
COLOR_YELLOW = "\033[0;33m"
COLOR_OFF    = "\033[0m"

SHELL = /bin/sh

srcdir = .

INSTALL = /usr/bin/install -c
INSTALLDATA = /usr/bin/install -c -m 644

prefix = @prefix@
exec_prefix=@exec_prefix@
bindir = @bindir@
libdir = @libdir@
localstatedir = @localstatedir@/mercury
datarootdir = @datarootdir@/mercury

.SUFFIXES:
.SUFFIXES: .c .o

LIBMERC = libmerc/libmerc.so

# set parameters from configure (autoconf)
#
python      = @PY@
have_py3    = @PYTHON3@
have_pip3   = @PIP3@
have_tpkt3  = @HAVE_TPACKET_V3@
CDEFS       = $(filter -DHAVE_PYTHON3=1, @DEFS@) -DDEFAULT_RESOURCE_DIR="\"$(datarootdir)\""

CXX     = @CXX@
CC      = @CC@
CFLAGS  = --std=c++17
CFLAGS += -O3
# CFLAGS += -march=x86-64 -mtune=generic
CFLAGS += -Wall -Wpedantic -Wextra -Wno-deprecated $(CDEFS) $(MSV)
CFLAGS += -Wno-missing-braces # this flag squelches a gcc bug that causes a spurious warning
CFLAGS += -Wno-narrowing      # needed for oid.h to suppress spurious (un)signed char error
CFLAGS += $(OPTFLAGS)

# MERC and MERC_H hold the core source and header files, respectively
#
# MERC   =  mercury.c
ifeq ($(have_tpkt3),yes)
MERC   += af_packet_v3.c
else
MERC   += capture.c
endif
MERC   += config.c
MERC   += json_file_io.c
MERC   += output.c
MERC   += pkt_processing.cc
MERC   += pcap_file_io.c
MERC   += pcap_reader.c
MERC   += rnd_pkt_drop.c
MERC   += signal_handling.c

MERC_H =  mercury.h
MERC_H += af_packet_v3.h
MERC_H += config.h
MERC_H += json_file_io.h
MERC_H += llq.h
MERC_H += output.h
MERC_H += pkt_processing.h
MERC_H += pcap_file_io.h
MERC_H += pcap_reader.h
MERC_H += rnd_pkt_drop.h
MERC_H += signal_handling.h

ifeq ($(have_py3),yes)
# PYANALYSIS = python_interface.c
# CDEFS     += -Wl,--no-as-needed -ldl -lutil $(shell pkg-config --libs --cflags python3)
# CYTARGETS  = python-inference/tls_fingerprint_min.cpp python-inference/tls_fingerprint_min.h python-inference/tls_fingerprint_min_api.h
# CYPREREQ   = python-inference/tls_fingerprint_min.pyx
else
PYANALYSIS = 
CYTARGETS  = 
CYPREREQ   =
endif

CAP        = cap_net_raw,cap_net_admin,cap_dac_override+eip
EUID       = $(id -u)

all: libmerc mercury

mercury: mercury.c $(MERC) $(MERC_H) Makefile.in
	$(CXX) $(CFLAGS) -o mercury mercury.c $(MERC) -lpthread $(LIBMERC) -L./libmerc -lz -lcrypto
	@echo $(COLOR_GREEN) "Build complete; now run 'sudo setcap" $(CAP) "mercury'" $(COLOR_OFF)
	@echo $(COLOR_GREEN) "To run before 'make install', export LD_LIBRARY_PATH=$(shell pwd)/libmerc" $(COLOR_OFF)

setcap: mercury
	sudo setcap $(CAP) $<

.PHONY: libmerc
libmerc:
	$(MAKE) --directory=libmerc

# implicit rule for building object files
#
%.o: %.c %.h
#	$(CXX) $(CFLAGS) $(shell pkg-config --libs --cflags python3) -c $<
	$(CXX) $(CFLAGS) -c $<

# implicit rule for building object files from .cc files
#
%.o: %.cc %.h
#	$(CXX) $(CFLAGS) $(shell pkg-config --libs --cflags python3) -c $<
	$(CXX) $(CFLAGS) -c $<

# rule to build the cython/python analysis engine in python-inference
#
$(CYTARGETS): $(CYPREREQ)
ifeq ($(have_py3),yes)
	python3 python-inference/setup.py build_ext --inplace
endif

#MERC_OBJ = $(MERC:%.o=%.c)

libmerc_test: libmerc_test.c libmerc Makefile.in
	$(CC) -Wall -std=c17 -o libmerc_test libmerc_test.c -lpthread $(LIBMERC) -L./libmerc -lz -lcrypto
	@echo $(COLOR_GREEN) "To run before 'make install', export LD_LIBRARY_PATH=$(shell pwd)/libmerc" $(COLOR_OFF)


# special targets for mercury
#
.PHONY: debug
debug: mercury.c $(MERC) $(MERC_H) $(LIBMERC) Makefile
	$(CXX) $(CFLAGS) -g -Wall -o mercury mercury.c $(MERC) -lpthread -lmerc
	@echo "build complete; now run 'sudo setcap cap_net_raw,cap_net_admin,cap_dac_override+eip mercury'"

.PHONY: clean
clean:
	rm -rf mercury libmerc_test gmon.out *.o
	cd libmerc && $(MAKE) clean
	for file in Makefile.in README.md configure.ac; do if [ -e "$$file~" ]; then rm -f "$$file~" ; fi; done
	for file in $(MERC) $(MERC_H); do if [ -e "$$file~" ]; then rm -f "$$file~" ; fi; done

.PHONY: distclean
distclean: clean
	rm -rf Makefile autom4te.cache config.log config.status

.PHONY: install
install: libmerc mercury
	mkdir -p $(bindir)
	$(INSTALL) mercury $(bindir)
	$(INSTALL) $(LIBMERC) $(libdir)
	ldconfig
#	setcap cap_net_raw,cap_net_admin,cap_dac_override+eip $(bindir)/mercury
	adduser --system --no-create-home --group mercury
	mkdir -p $(localstatedir)
	$(INSTALL) -d $(localstatedir) -o mercury -g mercury

.PHONY: install-nonroot
install-nonroot: mercury
	mkdir -p $(bindir)
	$(INSTALL) mercury $(bindir)
	mkdir -p $(localstatedir)
	$(INSTALL) -d $(localstatedir)

.PHONY: uninstall
uninstall:
	rm -f $(bindir)/mercury
	rm -f $(libdir)/$(LIBMERC)
	ldconfig
	@echo "local captures not removed; to do that, run 'rm -rf $(localstatedir)'"

#  To build mercury for profiling using gprof, run
#
#     make clean
#     make OPTFLAGS="-pg"
#
#  ... to first remove all of the normally-built components, and then
#  build all of them with gprof instrumentation.  See 'man gprof' for
#  further informataion.

.PHONY: cppcheck
cppcheck: $(MERC)
	cppcheck --language=c++ --std=c++17 --force --enable=all -URAPIDJSON_DOXYGEN_RUNNING --template='{file}:{line}:{severity}:{message}' $^
	cd libmerc && $(MAKE) cppcheck

.PHONY: test
test: mercury
	cd ../test && $(MAKE)

major=$(shell cat ../VERSION | grep -o "^[0-9]*")
minor=$(subst .,,$(shell cat ../VERSION | grep -o "\.[0-9]*\."))
patch=$(shell cat ../VERSION | grep -o "[0-9]*$$")
version=$(major).$(minor).$(patch)
MSV ="-DMERCURY_SEMANTIC_VERSION=$(major),$(minor),$(patch)"
.PHONY: increment-patchlevel increment-minor-version increment-major-version
increment-patchlevel:
	echo $(major).$(minor).$(shell expr $(patch) + 1) > ../VERSION
	git tag -a $(major).$(minor).$(shell expr $(patch) + 1) -m "\"patchlevel increment\""

increment-minor-version:
	echo $(major).$(shell expr $(minor) + 1).0 > ../VERSION
	git tag -a $(major).$(shell expr $(minor) + 1).0 -m "\"minor version increment\""

increment-major-version:
	echo $(shell expr $(major) + 1).0.0 > ../VERSION
	git tag -a $(shell expr $(major) + 1).0.0 -m "\"major version increment\""

# EOF
